class CityReview < ApplicationRecord
# Ossemble's Main City Review Model for What You Love, feeds into City_Review_score, and includes Associations, Callbacks, Foreign Key Usage, and Validations.

# Begin - SCOPES: Scopes for City Reviews.
  # Below - Orders City Reviews that have been recently updated/created to the top of the list.
  default_scope { order(created_at: :desc)}
  # Below - Scopes City Reviews by Loves, meaning score is greater than 60
  scope :loves, -> { where(:score => 60..100)}
  # Below - Scopes City Reviews by Loves, meaning score is greater than 60
  scope :improves, -> { where(:score => 0...60)}
# End - SCOPES: Scopes for City Reviews.

# Begin - Gems and acts_as setups. 
  # Below - PUBLICACTIVITY: Loads in Public Activity Gem for tracking of users' comments
  include PublicActivity::Model
  # Below - Adds Tracking to this model for PubliCActivity
  tracked
  # Below - FRIENDLYID: Adding FriendlyID to Cities URL so title is url instead of ID. 
  extend FriendlyId
  friendly_id :title, use: [:slugged, :finders]
  # Below - Determines if there's a blank or new Record to assign a slug to.
  def should_generate_new_friendly_id?
    new_record? || slug.blank?
  end
  # Below - RATYRATE: Adding RatyRate function inside of Reviews to allow Reviews to affect Departments.
    ratyrate_rateable 'score'
  # Below - ACTS_AS_VOTABLE - Acts_as_votable gem to allow upvotes on City Reviews.
    acts_as_votable
  # Below - PUNCHABLE: Allows Acts_as_punchable for City Review from the punching_bag gem.
    acts_as_punchable
  # Below - TAGGABLE: Allows Acts_as_taggable for City Review from the acts_as_taggable gem.
    acts_as_taggable_on :love, :improve
# End - Gems and acts_as setups.


# Begin - VALIDATIONS: Additional validations of DB field attributes presence at Model-level and Character Limitations.
  # Below - Ensures the user can only post one WUL City Review. Validates only in production.
  validates_uniqueness_of :user_id, presence: true, message: "You have already written a Review for your city." if Rails.env.production?
  # Below - Ensures the review includes a score 1 through 100.
  validates_inclusion_of :score, in: 1..100, message: 'Please select a score rating for your City Review.'
  # Below - Ensures the title of the review is at least 4 characters and 60 maximum, allows blank since a title can be generated by callback below.
  validates_length_of :title,  :minimum => 5, :maximum => 70, 
    :too_long => "We appreciate how descriptive you are, but the maximum characters for a title is 70 characters. Please be more succinct.", 
    :too_short => "We strive for titles that clearly identify your review so everyone can benefit. The minimum length for a title is 5 characters. Please include a better title.", 
    :allow_blank => true
  # Below - Ensures length of review description is at least 150 characters and 3000 maximum.
  validates_length_of :description,  :minimum => 100, :maximum => 6000, 
    :too_long => "We appreciate how descriptive you are, but the maximum characters for a review is 6,000 characters, which is about 900 words. Please be more succinct.", 
    :too_short => "We strive for quality reviews so everyone can benefit. The minimum character length for a review is 100 characters, which is about 30 words. Please include more detail in your review by adding 
                       additional information about your experience with your city." 
  # Below - Ensures love tags are included in a review.
  validates_presence_of :love_list, message: "Please include three things you love about your city; separated by commas. ( E.G.: 'Scenery, Arts, Community )."
  # Below - Ensures improve tags are included in a review.
  validates_presence_of :improve_list, message: "Please include three things you'd like to see your city improve; separated by commas. ( E.G.: 'Biking, Regulations, Traffic )."
# End - VALIDATIONS: Additional validations of DB field attributes presence at Model-level and Character Limitations.

# Begin - ASSOCIATIONS: All Associations of City Reviews Table to other tables.
  # Below - Associates City Reviews as a One to Many association with Cities (City has_many CityReviews)
  belongs_to :city
  # Below - Associates City Reviews as a One to One association with User (Users has_one City Review).
  belongs_to :user
  # Below - Associates City Reviews as a One to Many association with CityReviewScore (CityReviewScore has_many CityReviews)
  belongs_to :city_review_score  
  # Below - City Reviews have many comments through polymorphic commentable table. 
  has_many :comments, :as => :commentable, dependent: :destroy
  # Below - Allows city reviews to have an image attahced.
  has_one_attached :image, dependent: :destroy
# End - ASSOCIATIONS: All Associations of City Reviews Table to other tables.

# Begin -  CUSTOM METHODS
  # Below - Returns if the city review is a loves or improves category
  def category
    case self.score
    when 60..100
      return "Loves"
    when 0...60
      return "Improves"
    end
  end   
  
  # Below -  Checks if the review is done by a resident of the reviewed city, using is_resident_of? method from user.rb model.
  def is_resident_review?
    user_review = self.user
    if user_review.is_resident_of?(self.city)
      return true 
    else
      return false
    end 
  end   
  
  # Below -  Checks if the review has enough votes to be considered scorable.
  def has_enough_votes?
    if self.resident_upvotes.count >= 5
      return true 
    else 
      return false
    end 
  end   

  # Below -  Checks if the review will impact the city score. Determining factors are if the user belongs to that city, or if the non-resident user's review has 5 endorsements
  def is_scorable_review? 
    if self.is_resident_review?
      return true # Review belongs to resident of the city, so it's scorable.
    elsif self.has_enough_votes? # Reviewer isn't resident of city being review, so does the review have enough votes to be scorable
      return true  # Has enough votes to affect city score 
    else # Review doesn't have enough votes and is a non-resident review.
      return false
    end 
  end   

  # Below -  A scope to filter scorable reviews.
  def scorable_reviews
    self.select { |review| review.is_scorable_review? == true }
  end  
  
  # Below -  A scope to filter votes by residents of the city where the review was posted.
  def resident_upvotes 
     self.votes_for.voters.select { |user| user.city == self.city }
  end   

# End - CUSTOM METHODS

# Begin - CUSTOM CALLBACKS: Before_save, after_commit, & Callbacks for City Review Model.
  # Below - City Review Score callbacks to update CityReviewScore and into CityScore, which will only carry over if the complaint is completed or has failed.
    after_commit :update_city_review_score, on: [:create, :update, :destroy]
  # Below - Callback for Generating a title if one is left blank on a new or updated City Review
    before_save :generate_city_review_title, on: [:create, :update], if: :title_blank?
  
  # Below - First Conditional callback which will determine if the review title is blank or not
    def title_blank?
      self.title.blank?
    end
  # Below - Generates a title for a city review if it's left blank. 
    def generate_city_review_title 
      self.title = "#{self.user.name} Loves"
    end 
  # Below - Called on an after update of a City Review if it's been completed or failed to then go to CityReviewScore table and run the "update_complaint_score" method.
    def update_city_review_score
      city_review_score.update_city_review_avg_score
    end
# End - CUSTOM CALLBACKS: Before_save, after_commit, & Callbacks for City Review Model.

  
end
